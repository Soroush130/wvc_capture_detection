# docker-compose.yml
version: '3.8'
services:
  # ==================== REDIS ====================
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - capture_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ==================== CELERY BEAT ====================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-beat
    command: celery -A celery_app beat --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - capture_network
    restart: unless-stopped

  # ==================== CAPTURE WORKERS ====================
  celery-worker-capture-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker-capture-1
    command: celery -A celery_app worker -Q capture --hostname=capture1@%h --loglevel=info --concurrency=4 --pool=solo
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - WORKER_NAME=capture1
      - YOLO_DEVICE=cpu
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - capture_network
    restart: unless-stopped

  celery-worker-capture-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker-capture-2
    command: celery -A celery_app worker -Q capture --hostname=capture2@%h --loglevel=info --concurrency=4 --pool=solo
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - WORKER_NAME=capture2
      - YOLO_DEVICE=cpu
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - capture_network
    restart: unless-stopped

  # ==================== DETECTION WORKERS ====================
  celery-worker-detection-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker-detection-1
    command: celery -A celery_app worker -Q detection --hostname=detection1@%h --loglevel=info --concurrency=2 --pool=solo
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - WORKER_NAME=detection1
      - YOLO_DEVICE=cpu
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - capture_network
    restart: unless-stopped

  celery-worker-detection-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker-detection-2
    command: celery -A celery_app worker -Q detection --hostname=detection2@%h --loglevel=info --concurrency=2 --pool=solo
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - WORKER_NAME=detection2
      - YOLO_DEVICE=cpu
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - capture_network
    restart: unless-stopped

  # ==================== FLOWER ====================
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flower
    command: celery -A celery_app flower --port=5555
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - capture_network
    restart: unless-stopped

  # ==================== TELEGRAM BOT ====================
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: telegram-bot
    command: python telegram_bot/telegram_bot_handler.py
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - capture_network
    restart: unless-stopped

# ==================== NETWORKS ====================
networks:
  capture_network:
    driver: bridge

# ==================== VOLUMES ====================
volumes:
  redis_data: