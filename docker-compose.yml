services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - capture_network

  celery-beat:
    build: .
    command: celery -A celery_app beat --loglevel=info
    volumes:
      - .:/app
    environment:
      - REDIS_HOST=redis
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - capture_network

  celery-worker-1:
    build: .
    command: celery -A celery_app worker --loglevel=info --concurrency=20 --hostname=worker1@%h
    volumes:
      - .:/app
    environment:
      - REDIS_HOST=redis
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - capture_network

  celery-worker-2:
    build: .
    command: celery -A celery_app worker --loglevel=info --concurrency=20 --hostname=worker2@%h
    volumes:
      - .:/app
    environment:
      - REDIS_HOST=redis
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - capture_network

  flower:
    build: .
    command: celery -A celery_app flower --port=5555
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    environment:
      - REDIS_HOST=redis
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
    env_file:
      - .env
    depends_on:
      - redis
      - celery-worker-1
    restart: unless-stopped
    networks:
      - capture_network

volumes:
  redis_data:

networks:
  capture_network:
    driver: bridge